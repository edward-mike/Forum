# Generated by Django 3.2.7 on 2021-09-11 02:38

import dev.users.models
import django.core.validators
from django.db import migrations, models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uuid', models.CharField(default=dev.users.models.get_default_uuid, editable=False, max_length=32, unique=True)),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. letters, numbers, and /./-/_ characters.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.-]+$'), 'Enter a valid username.', 'invalid')])),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='e-mail address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('full_name', models.CharField(blank=True, max_length=256, verbose_name='full name')),
                ('date_joined', models.DateTimeField(blank=True, help_text='Designates the date user accepted invitation token', null=True, verbose_name='date joined')),
                ('invite_code', models.CharField(blank=True, max_length=16, null=True, verbose_name='Invite Code')),
                ('joined_from_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('default_avatar', models.ImageField(blank=True, max_length=255, null=True, upload_to='', verbose_name='user default avatar')),
                ('avatar_src', models.ImageField(blank=True, max_length=255, null=True, upload_to=dev.users.models.avatar_upload_dir, verbose_name='user uploaded avatar ')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
